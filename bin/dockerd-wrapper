#!/bin/sh
set -e

default_socket_group=docker

aa_profile_reloaded="$SNAP_COMMON/profile_reloaded"

workaround_apparmor_profile_reload() {
    #https://github.com/docker/docker-snap/issues/4
    if [ ! -f "$aa_profile_refreshed" ]; then
        if [ "$(grep -c 'docker-default (enforce)' /sys/kernel/security/apparmor/profiles)" -ge 1 ]; then
            export DOCKER_FORCE_LOAD_AA_PROFILE=1
            touch $aa_profile_reloaded
        fi
    fi
}

workaround_lp1626019() {
    t=`egrep '/snap\.\w+_snap\.docker.dockerd_\w+/tmp ' /proc/self/mountinfo | cut -d ' ' -f 5`
    if [ -n "$t" ] && [ ! -e "$t" ]; then
        mkdir -p "$t"
        ln -s /sys "$t"/sys
    fi
}

workaround_lp1606510() {
    # ensure there's at least one member in the group.
    if [ $(getent group docker-snap | awk -F':' '{print $NF}') ]; then
        default_socket_group=docker-snap
    fi
}

yolo() {
	"$@" > /dev/null 2>&1 || :
}

force_umount() {
	yolo umount    "$@"
	yolo umount -f "$@"
	yolo umount -l "$@"
}

dir="$(mktemp -d)"
trap "force_umount --no-mtab '$dir'; rm -rf '$dir'" EXIT
# try mounting a few FS types to force the kernel to try loading modules
for t in aufs overlay zfs; do
	yolo mount --no-mtab -t "$t" /dev/null "$dir"
	force_umount --no-mtab "$dir"
done
# inside our snap, we can't "modprobe" for whatever reason (probably no access to the .ko files)
# so this forces the kernel itself to "modprobe" for these filesystems so that the modules we need are available to Docker
rm -rf "$dir"
trap - EXIT

# use SNAP_DATA for most "data" bits
mkdir -p \
	"$SNAP_DATA/run" \
	"$SNAP_DATA/run/docker" \
	"$SNAP_COMMON/var-lib-docker"
set -- \
	--debug \
	--log-level=debug \
	\
	--exec-root="$SNAP_DATA/run/docker" \
	--graph="$SNAP_COMMON/var-lib-docker" \
	--pidfile="$SNAP_DATA/run/docker.pid" \
	\
	"$@"

workaround_lp1626019

workaround_lp1606510

workaround_apparmor_profile_reload

exec dockerd -G $default_socket_group "$@"
